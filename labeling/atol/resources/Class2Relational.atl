module Class2Relational;
create OUT : Relational from IN : Class;

uses strings;

--Transformation 4
unique lazy rule Class2Table {
	--Transformation 1
	from
		--Transformation 2
		c : Class!Class
	--Transformation 1
	to
		--Transformation 3
		_out : Relational!Table (
			--Transformation 5
			name <- c.name,
			--Transformation 41
			col <- c.attr->select(e | not e.multiValued)->collect(e |
				
				if e.type.oclIsKindOf(Class!DataType) then
					thisModule.DataTypeAttribute2Column(e)._out
				else
					thisModule.ClassAttribute2Column(e).foreignKey
				endif
			)->prepend(key),
			--Transformation 4
			key <- Set {key}
		),
		--Transformation 3
		key : Relational!Column (
			--Transformation 3
			name <- 'objectId'
		)
}

--Transformation 4
unique lazy rule DataType2Type {
	--Transformation 1
	from
		--Transformation 3
		dt : Class!DataType
	--Transformation 1
	to
		--Transformation 3
		_out : Relational!Type (
			--Transformation 3
			name <- dt.name
		)
}

--Transformation 4
unique lazy rule DataTypeAttribute2Column {
	--Transformation 1
	from
		--Transformation 3
		a : Class!Attribute
--		(
			--Transformation 12
--			a.type.oclIsKindOf(Class!DataType) and not a.multiValued
--		)
	--Transformation 1
	to
		--Transformation 3
		_out : Relational!Column (
			--Transformation 5
			name <- a.name,
			--Transformation 15
			type <- thisModule.DataType2Type(a.type.oclAsType(Class!DataType))._out
		)
}

--Transformation 4
unique lazy rule MultiValuedDataTypeAttribute2Column {
--Transformation 1
	from
		--Transformation 3
		a : Class!Attribute
	--Transformation 1
	to
		--Transformation 3
		_out : Relational!Table (
			--Transformation 13
			name <- a.owner.name + '_' + a.name,
			--Transformation 5
			col <- Sequence {id, value}
		),
		--Transformation 3
		id : Relational!Column (
			--Transformation 11
			name <- a.owner.name.firstToLower() + 'Id'
		),
		--Transformation 3
		value : Relational!Column (
			--Transformation 5
			name <- a.name,
			--Transformation 15
			type <- thisModule.DataType2Type(a.type.oclAsType(Class!DataType))._out
		)
}

--Transformation 4
unique lazy rule ClassAttribute2Column {
	--Transformation 1
	from
		--Transformation 3
		a : Class!Attribute
	--Transformation 1
	to
		--Transformation 3
		foreignKey : Relational!Column (
			--Transformation 7
			name <- a.name + 'Id'
		)
}

--Transformation 4
unique lazy rule MultiValuedClassAttribute2Column {
	--Transformation 1
	to
		--Transformation 3
		t : Relational!Table (
			--Transformation 13
			name <- a.owner.name + '_' + a.name,
			--Transformation 5
			col <- Sequence {id, foreignKey}
		),
		--Transformation 3
		id : Relational!Column (
			--Transformation 11
			name <- a.owner.name.firstToLower() + 'Id'
		),
		--Transformation 3
		foreignKey : Relational!Column (
			--Transformation 7
			name <- a.name + 'Id'
		)
}

