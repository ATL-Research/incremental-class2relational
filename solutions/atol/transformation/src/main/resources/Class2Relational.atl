-- Changes made for ATOL:
-- - removed allInstances use
-- - switched to unique lazy rules
--	- + calls
--	- + added abstract rule
--	- accessed unique lazy rule target tuple (which does not exist in standard ATL)
-- - renamed out into _out
--	- ATOL's out should rather be renamed into something that is more likely to avoid name collisions
-- Setup
module Class2Relational;
create OUT : Relational from IN : Class;

uses strings;


-- if there is a configuration problem with the library string,
-- delete the two firstToLower() operations and you no longer need the library "strings"
-- the transfomarion will execute 


-- inheritance not supported yet

-- issue: choose an object-id Type (Integer, String?).
-- We choose Integer here, assuming this type is defined in the source model.

-- global variable
-- context 
--helper def: objectIdType : Relational!Type =
--	Class!DataType.allInstances()->select(e | e.name = 'Integer')->first();

-- Transformation
unique lazy rule Class2Table {
	from
	-- Transformation
		c : Class!Class
	to
	-- Transformation
		_out : Relational!Table (
			-- Transformation
			name <- c.name,
			-- Columns are generated from Attributes in another rule not explicitly called here !
			-- Transformation 4
			-- Model_Traversal 30
			col <- c.attr->select(e | not e.multiValued)->collect(e |
				--thisModule.SingleValuedAttribute2Column(e)._out
				if e.type.oclIsKindOf(Class!DataType) then
					thisModule.DataTypeAttribute2Column(e)._out
				else
					thisModule.ClassAttribute2Column(e).foreignKey
				endif
			)->prepend(key),
			-- Transformation 
			key <- Set {key}
		),
		-- Transformation 
		key : Relational!Column (
			name <- 'objectId'
			--type <- thisModule.objectIdType
		)
}

-- Transformation 
unique lazy rule DataType2Type {
	from
		-- Transformation 
		dt : Class!DataType
	to
		-- Transformation 
		_out : Relational!Type (
			name <- dt.name
		)
}

--unique lazy abstract rule SingleValuedAttribute2Column {
--	from
--		a : Class!Attribute
--	to
--		_out : Relational!Column
--}

-- Transformation 
unique lazy rule DataTypeAttribute2Column {--extends SingleValuedAttribute2Column {
	from
		-- Transformation 
		a : Class!Attribute
--		(
--			a.type.oclIsKindOf(Class!DataType) and not a.multiValued
--		)
	to
		-- Transformation 
		_out : Relational!Column (
			-- Transformation 
			name <- a.name,
			-- Transformation 
			type <- thisModule.DataType2Type(a.type.oclAsType(Class!DataType))._out
-- explicit use of implicit tracking links (first expected syntax, then present actual syntax)
			-- Transformation 
--			owner <- [Class2Type.key]a.owner
			-- Transformation 
--			owner <- thisModule.resolveTemp(a.owner, 'key')
		)
}

-- Transformation 
unique lazy rule MultiValuedDataTypeAttribute2Column {
	from
		-- Transformation 
		a : Class!Attribute
--		(
--			a.type.oclIsKindOf(Class!DataType) and a.multiValued
--		)
	to
		-- Transformation 
		_out : Relational!Table (
			name <- a.owner.name + '_' + a.name,
			col <- Sequence {id, value}
		),
		-- Transformation 
		id : Relational!Column (
			name <- a.owner.name.firstToLower() + 'Id'--,
			--type <- thisModule.objectIdType
		),
		-- Transformation 
		value : Relational!Column (
			name <- a.name,
			type <- thisModule.DataType2Type(a.type.oclAsType(Class!DataType))._out
		)
}

-- Transformation 
unique lazy rule ClassAttribute2Column {--extends SingleValuedAttribute2Column {
	from
		-- Transformation 
		a : Class!Attribute
--		(
--			a.type.oclIsKindOf(Class!Class) and not a.multiValued
--		)
	to
		-- Transformation 
		foreignKey : Relational!Column (
			name <- a.name + 'Id'--,
			--type <- thisModule.objectIdType
		)
}

-- Transformation 
unique lazy rule MultiValuedClassAttribute2Column {
	from
		-- Transformation 
		a : Class!Attribute
--		(
--			a.type.oclIsKindOf(Class!Class) and a.multiValued
--		)
	to
		-- Transformation 
		t : Relational!Table (
			name <- a.owner.name + '_' + a.name,
			col <- Sequence {id, foreignKey}
		),
		-- Transformation 
		id : Relational!Column (
			name <- a.owner.name.firstToLower() + 'Id'--,
			--type <- thisModule.objectIdType
		),
		-- Transformation 
		foreignKey : Relational!Column (
			name <- a.name + 'Id'--,
			--type <- thisModule.objectIdType
		)
}

