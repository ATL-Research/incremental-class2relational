// we said that we do not count imports
import "platform:/resource/ClassToRelational/src/metamodels/Class.msl"
import "platform:/resource/ClassToRelational/src/metamodels/Relational.msl"
import "platform:/plugin/org.emoflon.neo.neocore/model/AttributeConstraintsLibrary.msl"
import "platform:/resource/ClassToRelational/src/AttributeConstraints.msl"

// Setup
tripleGrammar ClassToRelational {
	// Setup
	source {
		// Setup
		class_
	}

	// Setup
	target {
		// Setup
		relational_
	}

	// Setup
	correspondence {
		// Tracing
		Class <- ClassToTable -> Table
		// Tracing
		DataType <- DateTypeToType -> Type
		// Tracing
		Attribute <- AttributeToColumn -> Column
		// Tracing
		Attribute <- AttributeToTable -> Table
		// Tracing
		Class <- ClassToType -> Type
	}

	// Setup
	rules {
		// Setup
		ClassToTable
		// Setup
		DataTypeToType

		// Setup
		PrimitiveAttributeToColumn
		// Setup		
		ClassAttributeToColumn
		// Setup		
		ClassAttributeToColumnNonInjective

		// Setup
		PrimitiveAttributeToTable
		// Setup		
		ClassAttributeToTable
		// Setup		
		ClassAttributeToTableNonInjective
	}
}

// Setup
tripleRule ClassToTable : ClassToRelational {
	// Setup
	source {
		// Transformation
		++ class : Class {
			// Transformation
			.name := <className>
		}

		// Model_Traversal
		integerType : DataType {
			// Model_Traversal
			.name : "Integer"
		}
	}

	// Setup
	target {
		// Transformation
		++ table : Table {
			// Model_Traversal
			.name := <className>
			// Transformation
			++ -col->objectId
			// Transformation
			++ -key->objectId
		}
		// Transformation
		++ objectId : Column {
			// Model_Traversal
			.name := "objectId"
			// Transformation
			++ -owner->table
			// Transformation
			++ -type->integer
			// Transformation
			++ -keyOf->table
		}

		// Model_Traversal
		integer : Type {
			// Model_Traversal
			.name : "Integer"
		}
	}

	// Setup
	correspondence {
		// Tracing
		++ class <-:ClassToTable-> table
		// Tracing
		integerType <-:DateTypeToType-> integer
	}
} 

// Setup
tripleRule DataTypeToType : ClassToRelational {
	// Setup
	source {
		// Transformation
		++ dataType : DataType {
			// Transformation
			.name := <typeName>
		}
	}

	// Setup
	target {
		// Transformation
		++ type : Type {
			// Transformation
			.name := <typeName>
		}
	}

	// Setup
	correspondence {
		// Tracing 
		++ dataType <-:DateTypeToType-> type
	}
}

// Setup
tripleRule PrimitiveAttributeToColumn : ClassToRelational {
	// Setup
	source {
		// Model_Traversal
		class : Class {
			// Transformation
			++ -attr->attribute
		}

		// Transformation
		++ attribute : Attribute {
			// Transformation
			.name := <attrName>
			// Transformation
			.multiValued := false
			// Transformation
			++ -owner->class
			// Transformation
			++ -type->attrType
		}

		// Model_Traversal
		attrType : DataType
	}

	// Setup
	target { 
		// Model_Traversal
		table : Table {
			// Transformation
			++ -col-> column
		}

		// Transformation
		++ column : Column {
			// Transformation
			.name := <attrName>
			// Transformation
			++ -type->colType
			// Transformation
			++ -owner->table
		}
		
		// Model_Traversal
		colType : Type
	}

	// Setup
	correspondence {
		// Tracing
		class <- :ClassToTable->table
		// Tracing
		attrType <-:DateTypeToType->colType
		// Tracing
		++ attribute <-:AttributeToColumn->column
	}
}

// Setup
tripleRule ClassAttributeToColumn : ClassToRelational {
	// Setup
	source {
		// Model_Traversal
		class : Class {
			// Transformation
			++ -attr->attribute
		}

		// Transformation
		++ attribute : Attribute {
			// Transformation
			.name := <attrName>
			// Transformation
			.multiValued := false
			// Transformation
			++ -owner->class
			// Transformation
			++ -type->attrType
		}

		// Model_Traversal
		attrType : Class
	}

	// Setup
	target { 
		// Model_Traversal
		table : Table {
			// Transformation
			++ -col-> column
		}

		// Transformation
		++ column : Column {
			// Transformation
			.name := <colName>
			// Transformation
			++ -type->integer
			// Transformation
			++ -owner->table
		}

		// Model_Traversal
		integer : Type {
			// Model_Traversal
			.name : "Integer"
		}
	}

	// Setup
	correspondence {
		// Tracing
		class <- :ClassToTable->table
		// Tracing
		++attribute <-:AttributeToColumn->column
	}

	// Setup
	attributeConstraints {
		// Tracing
		addSuffix(
			// Tracing
			word=<attrName>,
			// Tracing
			suffix="Id",
			// Tracing
			result=<colName>
		)
	}
}

// Setup
tripleRule ClassAttributeToColumnNonInjective : ClassToRelational {
	// Setup
	source {
		// Model_Traversal
		class : Class {
			// Transformation
			++ -attr->attribute
		}

		// Transformation
		++ attribute : Attribute {
			// Transformation
			.name := <attrName>
			// Transformation
			.multiValued := false
			// Transformation
			++ -owner->class
			// Transformation
			++ -type->class
		}		
	}

	// Setup
	target { 
		// Model_Traversal
		table : Table {
			// Transformation
			++ -col-> column
		}

		// Transformation
		++ column : Column {
			// Transformation
			.name := <colName>
			// Transformation
			++ -type->integer
			// Transformation
			++ -owner->table
		}

		// Model_Traversal
		integer : Type {
			// Model_Traversal
			.name : "Integer"
		}
	}

	// Setup
	correspondence {
		// Tracing
		class <- :ClassToTable->table
		// Tracing
		++attribute <-:AttributeToColumn->column
	}

	// Setup
	attributeConstraints {
		// Tracing
		addSuffix(
			// Tracing
			word=<attrName>,
			// Tracing
			suffix="Id",
			// Tracing
			result=<colName>
		)
	}
}

// Setup
tripleRule PrimitiveAttributeToTable : ClassToRelational {
	// Setup
	source {
		// Model_Traversal
		class : Class {
			// Model_Traversal
			.name : <className>
			++ -attr->attribute
		}

		// Transformation
		++ attribute : Attribute {
			// Transformation
			.name := <attrName>
			// Transformation
			.multiValued := true
			// Transformation
			++ -owner->class
			// Transformation
			++ -type->attrType
		}

		// Model_Traversal
		attrType : DataType
	}

	// Setup
	target {
		// Transformation
		++ table : Table {
			// Transformation
			.name := <tableName>
			// Transformation
			++ -col->column
			// Transformation
			++ -col->id
		}

		// Transformation
		++ id : Column {
			// Transformation
			.name := <idName>
			// Transformation
			++ -type->integer
			// Transformation
			++ -owner->table
		}

		// Transformation
		++ column : Column {
			// Transformation
			.name := <attrName>
			// Transformation
			++ -owner->table
			// Transformation
			++ -type->colType
		}

		// Model_Traversal
		colType : Type

		// Model_Traversal
		integer : Type {
			// Model_Traversal
			.name : "Integer"
		}
	}

	// Setup
	correspondence {
		// Tracing
		++attribute <-:AttributeToTable->table
		// Tracing
		attrType <-:DateTypeToType->colType
		
	}

	// Setup
	attributeConstraints {
		// Tracing
		concat(
			// Tracing
			separator="_",
			// Tracing
			left=<className>,
			// Tracing
			right=<attrName>,
			// Tracing
			combined=<tableName>
		)

		// Tracing
		firstToLowerCase(
			// Tracing
			word=<className>,
			// Tracing
			lowerCase=<lower>
		)

		// Tracing
		addSuffix(
			// Tracing
			word=<lower>,
			// Tracing
			suffix="Id",
			// Tracing
			result=<idName>
		)
	}
}

// Setup
tripleRule ClassAttributeToTable : ClassToRelational {
	// Setup
	source {
		// Model_Traversal
		class : Class {
			// Model_Traversal
			.name : <className>
			++ -attr->attribute
		}

		// Transformation
		++ attribute : Attribute {
			.name := <attrName>
			// Transformation
			.multiValued := true
			// Transformation
			++ -owner->class
			// Transformation
			++ -type->attrType
		}

		// Model_Traversal
		attrType : Class

		// Model_Traversal
		integerType : DataType {
			// Model_Traversal
			.name : "Integer"
		}
	}

	// Setup
	target { 	
		// Transformation
		++ table : Table {
			// Transformation
			.name := <tableName>
			// Transformation
			++ -col->column
			// Transformation
			++ -col->id
		}

		// Transformation
		++ id : Column {
			// Transformation
			.name := <idName>
			// Transformation
			++ -type->integer
			// Transformation
			++ -owner->table
		}

		// Transformation
		++ column : Column {
			// Transformation
			.name := <attrIdName>
			// Transformation
			++ -owner->table
			// Transformation
			++ -type->integer
		}

		// Model_Traversal
		integer : Type {
			// Model_Traversal
			.name : "Integer"
		}
	}

	// Setup
	correspondence {
		// Tracing
		++ attribute <-:AttributeToTable->table
		// Tracing
		integerType <-:DateTypeToType-> integer
	}

	// Setup
	attributeConstraints {
		// Tracing
		concat(
			// Tracing
			separator="_",
			// Tracing
			left = <className>,
			// Tracing
			right = <attrName>,
			// Tracing
			combined = <tableName>
		)

		// Tracing
		firstToLowerCase(
			// Tracing
			word=<className>,
			// Tracing
			lowerCase=<lower>
		)

		// Tracing
		addSuffix(
			// Tracing
			word=<lower>,
			// Tracing
			suffix="Id",
			// Tracing
			result=<idName>
		)

		// Tracing
		addSuffix(
			// Tracing
			word=<attrName>,
			// Tracing
			suffix="Id",
			// Tracing
			result=<attrIdName>
		)
	}
}

// Setup
tripleRule ClassAttributeToTableNonInjective : ClassToRelational {
	// Setup
	source {
		// Model_Traversal
		class : Class {
			// Model_Traversal
			.name : <className>
			++ -attr->attribute
		}

		// Transformation
		++ attribute : Attribute {
			// Transformation
			.name := <attrName>
			// Transformation
			.multiValued := true
			// Transformation
			++ -owner->class
			// Transformation
			++ -type->class
		}
	}

	// Setup
	target { 	
		// Transformation
		++ table : Table {
			// Transformation
			.name := <tableName>
			// Transformation
			++ -col->column
			// Transformation
			++ -col->id
		}

		// Transformation
		++ id : Column {
			// Transformation
			.name := <idName>
			// Transformation
			++ -type->integer
			// Transformation
			++ -owner->table
		}

		// Transformation
		++ column : Column {
			// Transformation
			.name := <attrName>
			// Transformation
			++ -owner->table
			// Transformation
			++ -type->integer
		}

		// Model_Traversal
		integer : Type {
			// Model_Traversal
			.name : "Integer"
		}
	}

	// Setup
	correspondence {
		// Tracing
		++ attribute <-:AttributeToTable->table
	}

	// Setup
	attributeConstraints {
		// Tracing
		concat(
			// Tracing
			separator="_",
			// Tracing
			left=<className>,
			// Tracing
			right=<attrName>,
			// Tracing
			combined=<tableName>
		)

		// Tracing
		firstToLowerCase(
			// Tracing
			word=<className>,
			// Tracing
			lowerCase=<lower>
		)

		// Tracing
		addSuffix(
			// Tracing
			word=<lower>,
			// Tracing
			suffix="Id",
			// Tracing
			result=<idName>
		)
	}
}