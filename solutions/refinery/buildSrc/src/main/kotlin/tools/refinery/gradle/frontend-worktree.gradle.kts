/*
 * SPDX-FileCopyrightText: 2021-2023 The Refinery Authors <https://refinery.tools/>
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package tools.refinery.gradle

import java.io.FileInputStream
import java.io.FileNotFoundException
import java.io.FileOutputStream
import java.util.Properties

plugins {
	id("tools.refinery.gradle.internal.frontend-conventions")
}

val yarn1Version = providers.gradleProperty("frontend.yarn1Version")

frontend {
	yarnGlobalInstallScript.set(yarn1Version.map { version -> "install -g yarn@$version" })
	yarnInstallScript.set(frontend.yarnVersion.map { version -> "set version $version --only-if-needed" })
	installScript.set(provider {
		if (project.hasProperty("ci")) "install --immutable --inline-builds" else "install"
	})
}

val frontendPropertiesFile: Provider<String> = frontend.nodeInstallDirectory.map { dir -> "$dir/frontend.properties" }

fun readFrontendProperties(): Properties {
	val props = Properties()
	try {
		FileInputStream(frontendPropertiesFile.get()).use { inputStream ->
			props.load(inputStream)
		}
	} catch (ignored: FileNotFoundException) {
		// Ignore missing file.
	}
	return props
}

fun getFrontendProperty(propertyName: String): String? {
	val props = readFrontendProperties()
	return props[propertyName]?.toString()
}

fun putFrontedProperty(propertyName: String, propertyValue: String) {
	val props = readFrontendProperties()
	props[propertyName] = propertyValue
	FileOutputStream(frontendPropertiesFile.get()).use { outputStream ->
		props.store(outputStream, "generated by refinery-frontend-worktree")
	}
}

tasks {
	installNode {
		onlyIf {
			getFrontendProperty("installedNodeVersion") != frontend.nodeVersion.get()
		}
		doLast {
			putFrontedProperty("installedNodeVersion", frontend.nodeVersion.get())
		}
	}

	installYarnGlobally {
		onlyIf {
			getFrontendProperty("installedYarn1Version") != yarn1Version.get()
		}
		doLast {
			putFrontedProperty("installedYarn1Version", yarn1Version.get())
		}
		outputs.dir(frontend.nodeInstallDirectory.map { dir -> "$dir/lib/node_modules/yarn" })
	}

	installYarn {
		outputs.file(frontend.yarnVersion.map { version -> ".yarn/releases/yarn-$version.cjs" })
	}

	installFrontend {
		inputs.files("package.json", "yarn.lock")
		outputs.files(".pnp.cjs", ".pnp.loader.mjs")
	}

	register("clobberFrontend", Delete::class) {
		delete(frontend.nodeInstallDirectory)
		delete(".yarn/cache")
		delete(".yarn/install-state.gz")
		delete(".yarn/sdks")
		delete(".yarn/unplugged")
		delete(".pnp.cjs")
		delete(".pnp.loader.mjs")
	}
}
